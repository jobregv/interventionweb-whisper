# transcription_service/__init__.py
# Archivo vac√≠o para hacer que transcription_service sea un paquete Python

# üìÅ transcription_service/.env
# Configuraci√≥n permanente para WSL

# IP de Windows que funciona para este sistema
BACKEND_URL=https://interventionweb-backend-development.up.railway.app

# Otras configuraciones
SPRING_BOOT_PORT=8080
CALLBACK_TIMEOUT=10
CALLBACK_RETRIES=3

# Redis
REDIS_URL=redis://localhost:6379/0

# Whisper
WHISPER_MODEL=medium
WHISPER_DEVICE=cpu

# Worker
WORKER_CONCURRENCY=3
# üìÅ transcription_service/celery_app.py
from celery import Celery
from config import Config
import logging

# Validar configuraci√≥n al inicio
Config.validate()

logging.basicConfig(level=getattr(logging, Config.LOG_LEVEL))
logger = logging.getLogger(__name__)

# Configuraci√≥n de Celery con variables de entorno
celery_app = Celery(
    "transcription_worker",
    broker=Config.REDIS_URL,
    backend=Config.REDIS_URL,
    include=['tasks']
)

# Configuraci√≥n optimizada y configurable
celery_app.conf.update(
    # Serializaci√≥n
    task_serializer='pickle',
    accept_content=['pickle'],
    result_serializer='pickle',
    
    # Timezone
    timezone='UTC',
    enable_utc=True,
    
    # Performance
    result_expires=3600,
    worker_prefetch_multiplier=Config.WORKER_PREFETCH,
    task_acks_late=True,
    worker_max_tasks_per_child=50,
    
    # Timeouts
    task_time_limit=Config.TASK_TIME_LIMIT,
    task_soft_time_limit=Config.TASK_TIME_LIMIT - 30,
    
    # Logging
    worker_log_level=Config.LOG_LEVEL,
    task_track_started=True,
    
    # Routing
    task_routes={
        'transcribe_audio_with_callback': {'queue': 'transcription'},
    },
    
    # Error handling
    task_reject_on_worker_lost=True,
    task_acks_on_failure_or_timeout=True,
)

logger.info(f"‚úÖ Celery configurado")
logger.info(f"   - Redis: {Config.REDIS_URL}")
logger.info(f"   - Concurrency: {Config.WORKER_CONCURRENCY}")
logger.info(f"   - Task Time Limit: {Config.TASK_TIME_LIMIT}s")
from .tasks import celery

# Este archivo se usa para lanzar el worker desde la l√≠nea de comandos
# Ejecuta: celery -A celery_worker.celery worker --loglevel=info --concurrency=3
# üìÅ transcription_service/config.py - SOLUCI√ìN PERMANENTE
import os
import subprocess
import socket
from typing import Optional

# Cargar archivo .env si existe
def load_env_file():
    """Carga variables del archivo .env si existe"""
    env_file = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_file):
        print(f"üìÅ Cargando configuraci√≥n desde: {env_file}")
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        return True
    return False

# Cargar .env al importar
load_env_file()

class Config:
    """Configuraci√≥n centralizada usando variables de entorno"""
    
    # Redis Configuration
    REDIS_URL: str = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
    
    # Whisper Model Configuration
    WHISPER_MODEL: str = os.getenv('WHISPER_MODEL', 'small')
    WHISPER_DEVICE: str = os.getenv('WHISPER_DEVICE', 'cpu')
    WHISPER_COMPUTE_TYPE: str = os.getenv('WHISPER_COMPUTE_TYPE', 'int8')
    
    # Celery Configuration
    WORKER_CONCURRENCY: int = int(os.getenv('WORKER_CONCURRENCY', '3'))
    WORKER_PREFETCH: int = int(os.getenv('WORKER_PREFETCH', '1'))
    TASK_TIME_LIMIT: int = int(os.getenv('TASK_TIME_LIMIT', '300'))  # 5 minutes
    
    # Callback Configuration
    CALLBACK_TIMEOUT: int = int(os.getenv('CALLBACK_TIMEOUT', '10'))
    CALLBACK_RETRIES: int = int(os.getenv('CALLBACK_RETRIES', '3'))
    
    # üéØ WSL/Windows Bridge Configuration - PERMANENTE
    # üéØ VPS Configuration - Backend en Railway
    BACKEND_URL: str = os.getenv('BACKEND_URL', 'https://interventionweb-backend-development.up.railway.app')  # IP fija que funciona
    SPRING_BOOT_PORT: int = int(os.getenv('SPRING_BOOT_PORT', '8080'))
    
    # File Configuration
    MAX_FILE_SIZE: int = int(os.getenv('MAX_FILE_SIZE', '50')) * 1024 * 1024  # 50MB default
    TEMP_DIR: str = os.getenv('TEMP_DIR', '/tmp')
    
    # Logging
    LOG_LEVEL: str = os.getenv('LOG_LEVEL', 'INFO')
    
    # API Configuration
    API_HOST: str = os.getenv('API_HOST', '0.0.0.0')
    API_PORT: int = int(os.getenv('API_PORT', '8000'))
    
    @classmethod
    def get_windows_host_ip(cls) -> str:
        """
        üéØ SOLUCI√ìN PERMANENTE: Usar IP configurada o fija conocida
        """
        configured_ip = cls.WINDOWS_HOST_IP
        
        # Si hay IP configurada, usarla
        if configured_ip and configured_ip != 'auto':
            print(f"‚úÖ Usando IP configurada permanentemente: {configured_ip}")
            return configured_ip
        
        # üîç Detectar si estamos en Windows o WSL
        import platform
        is_windows = platform.system() == "Windows"
        
        if is_windows:
            print(f"ü™ü Ejecut√°ndose en Windows - usando localhost")
            return "localhost"
        
        # Para WSL: IP fija conocida que funciona para este sistema
        known_working_ip = "192.168.48.1"
        print(f"‚úÖ WSL detectado - usando IP fija conocida: {known_working_ip}")
        
        # Verificar que la IP funciona (opcional, no bloqueante)
        try:
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            result = sock.connect_ex((known_working_ip, cls.SPRING_BOOT_PORT))
            sock.close()
            
            if result == 0:
                print(f"‚úÖ IP {known_working_ip} verificada y accesible")
            else:
                print(f"‚ö†Ô∏è IP {known_working_ip} no responde ahora, pero usando como configurada")
                
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo verificar conectividad: {e}")
        
        return known_working_ip
    
    @classmethod
    def get_callback_base_url(cls) -> str:
        return cls.BACKEND_URL
 
    @classmethod
    def test_spring_boot_connectivity(cls) -> bool:
        """
        üß™ Testa conectividad con Spring Boot
        """
        try:
            import requests
            test_url = f"{cls.get_callback_base_url()}/health"
            response = requests.get(test_url, timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ Spring Boot accesible en: {test_url}")
                return True
            else:
                print(f"‚ö†Ô∏è Spring Boot responde pero con c√≥digo: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå No se puede conectar a Spring Boot: {e}")
            print(f"   URL probada: {cls.get_callback_base_url()}")
            return False
    
    @classmethod
    def validate(cls):
        """Valida la configuraci√≥n al inicio"""
        print(f"üîç Validando configuraci√≥n...")
        print(f"   - Redis URL: {cls.REDIS_URL}")
        print(f"   - Whisper Model: {cls.WHISPER_MODEL}")
        print(f"   - Worker Concurrency: {cls.WORKER_CONCURRENCY}")
        print(f"   - Max File Size: {cls.MAX_FILE_SIZE // (1024*1024)}MB")
        print(f"   - Log Level: {cls.LOG_LEVEL}")
        
        # Mostrar configuraci√≥n WSL->Windows
        print(f"\nüåê Configuraci√≥n WSL->Windows:")
        windows_ip = cls.get_windows_host_ip()
        callback_url = cls.get_callback_base_url()
        print(f"   - IP Windows configurada: {windows_ip}")
        print(f"   - Callback URL: {callback_url}")
        print(f"   - Configuraci√≥n: PERMANENTE")
        
        print(f"‚úÖ Configuraci√≥n validada")
        return True
# üìÅ transcription_service/main.py
from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from celery.result import AsyncResult
import logging
from typing import Optional
import time

from config import Config
from celery_app import celery_app
from tasks import transcribe_audio_with_callback

# Validar configuraci√≥n
Config.validate()

logging.basicConfig(level=getattr(logging, Config.LOG_LEVEL))
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Audio Transcription API",
    description="Enterprise Audio Transcription Service",
    version="2.0.0"
)

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure properly for production
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

@app.post("/transcribe")
async def transcribe(
    audio: UploadFile = File(...),
    job_id: Optional[str] = Form(None),
    callback_url: Optional[str] = Form(None),
    callback_token: Optional[str] = Form(None)
):
    try:
        start_time = time.time()
        logger.info(f"üì§ Received file: {audio.filename} (job_id: {job_id})")
        
        # Validate audio content type
        if not audio.content_type or not audio.content_type.startswith('audio/'):
            raise HTTPException(
                status_code=400,
                detail="Invalid file type. Only audio files are allowed."
            )
        
        # Read file with size validation
        audio_bytes = await audio.read()
        file_size_mb = len(audio_bytes) / (1024 * 1024)
        
        if len(audio_bytes) > Config.MAX_FILE_SIZE:
            raise HTTPException(
                status_code=413,
                detail=f"File too large: {file_size_mb:.1f}MB. Maximum: {Config.MAX_FILE_SIZE // (1024*1024)}MB"
            )
        
        logger.info(f"üìÅ File read: {file_size_mb:.1f}MB")
        
        # Submit to Celery
        job = transcribe_audio_with_callback.apply_async(
            args=[audio_bytes],
            kwargs={
                'job_id': job_id,
                'callback_url': callback_url,
                'callback_token': callback_token
            },
            queue='transcription'
        )
        
        actual_job_id = job_id if job_id else job.id
        processing_time = time.time() - start_time
        
        logger.info(f"‚úÖ Task submitted: {actual_job_id} (processing: {processing_time:.2f}s)")
        
        return {
            "job_id": actual_job_id,
            "status": "processing",
            "message": "Audio submitted for transcription",
            "file_size_mb": round(file_size_mb, 2),
            "estimated_duration": "2-5 minutes"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error in /transcribe: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Internal error: {str(e)}")

@app.get("/result/{job_id}")
def get_result(job_id: str):
    """Get transcription result by job ID"""
    try:
        logger.info(f"üîç Querying result for job_id: {job_id}")
        result = AsyncResult(job_id, app=celery_app)
        
        response = {
            "job_id": job_id,
            "status": result.status.lower()
        }
        
        if result.failed():
            error_msg = str(result.result) if result.result else "Unknown error"
            logger.error(f"‚ùå Task {job_id} failed: {error_msg}")
            response.update({
                "status": "failed",
                "error": error_msg
            })
        elif result.ready():
            transcription = result.result
            logger.info(f"‚úÖ Task {job_id} completed")
            response.update({
                "status": "completed",
                "transcription": transcription,
                "length": len(transcription) if transcription else 0
            })
        
        return response
            
    except Exception as e:
        logger.error(f"‚ùå Error querying result {job_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Error: {str(e)}")

@app.get("/health")
def health_check():
    """Enhanced health check"""
    try:
        # Check Celery connection
        i = celery_app.control.inspect()
        stats = i.stats()
        active_workers = len(stats) if stats else 0
        
        # Check Redis connection
        redis_info = celery_app.backend.client.info()
        
        return {
            "status": "healthy",
            "timestamp": time.time(),
            "version": "2.0.0",
            "workers": {
                "active": active_workers,
                "configured_concurrency": Config.WORKER_CONCURRENCY
            },
            "redis": {
                "connected": True,
                "version": redis_info.get('redis_version', 'unknown')
            },
            "config": {
                "model": Config.WHISPER_MODEL,
                "device": Config.WHISPER_DEVICE,
                "max_file_size_mb": Config.MAX_FILE_SIZE // (1024*1024)
            }
        }
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        raise HTTPException(status_code=503, detail=f"Service unhealthy: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host=Config.API_HOST, port=Config.API_PORT)
# üìÅ transcription_service/tasks.py - ENTERPRISE SOLUTION
import tempfile
import os
import logging
import requests
import time
from faster_whisper import WhisperModel
from urllib.parse import urlparse, urlunparse

from celery_app import celery_app
from config import Config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Modelo por proceso para WSL
_process_model = None
_process_id = None

def get_whisper_model():
    """Obtiene modelo Whisper espec√≠fico por proceso"""
    global _process_model, _process_id
    current_pid = os.getpid()
    
    if _process_model is None or _process_id != current_pid:
        logger.info(f"üîÑ [PROCESS {current_pid}] Cargando modelo Whisper...")
        start_time = time.time()
        
        _process_model = WhisperModel("medium", device="cpu", compute_type="int8")
        _process_id = current_pid
        
        load_time = time.time() - start_time
        logger.info(f"‚úÖ [PROCESS {current_pid}] Modelo cargado en {load_time:.2f}s")
    
    return _process_model

def fix_callback_url_for_wsl(original_url: str) -> str:
    """Corrige URLs de callback para WSL hacia Windows"""
    if not original_url:
        return original_url
    
    try:
        parsed = urlparse(original_url)
        
        if parsed.hostname in ['localhost', '127.0.0.1']:
            windows_ip = Config.get_windows_host_ip()
            new_netloc = f"{windows_ip}:{parsed.port}" if parsed.port else windows_ip
            fixed_parsed = parsed._replace(netloc=new_netloc)
            fixed_url = urlunparse(fixed_parsed)
            logger.info(f"üîß [WSL] URL corregida: {original_url} -> {fixed_url}")
            return fixed_url
        
        return original_url
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error corrigiendo URL {original_url}: {e}")
        return original_url

@celery_app.task(name="transcribe_audio_with_callback", bind=True)
def transcribe_audio_with_callback(self, audio_bytes: bytes, job_id: str = None, 
                                  callback_url: str = None, callback_token: str = None):
    temp_path = None
    actual_job_id = job_id or self.request.id
    process_id = os.getpid()
    
    fixed_callback_url = fix_callback_url_for_wsl(callback_url)
    
    try:
        logger.info(f"üé§ [PROCESS {process_id}] INICIANDO transcripci√≥n - JobID: {actual_job_id}")
        start_time = time.time()
        
        # üîß DETECTAR FORMATO DE AUDIO AUTOM√ÅTICAMENTE
        def detect_audio_format(audio_data):
            """Detecta el formato del archivo de audio por sus primeros bytes"""
            if audio_data.startswith(b'RIFF'):
                return ".wav"
            elif audio_data.startswith(b'\x1a\x45\xdf\xa3'):  # WebM/Matroska header
                return ".webm"
            elif audio_data.startswith(b'OggS'):
                return ".ogg"
            elif audio_data.startswith(b'ID3') or audio_data.startswith(b'\xff\xfb'):
                return ".mp3"
            elif audio_data.startswith(b'fLaC'):
                return ".flac"
            else:
                # Fallback: WebM es el m√°s com√∫n desde navegadores
                logger.warning(f"‚ö†Ô∏è [PROCESS {process_id}] Formato no detectado, usando WebM por defecto")
                return ".webm"
        
        # Detectar formato correcto
        audio_format = detect_audio_format(audio_bytes)
        logger.info(f"üéµ [PROCESS {process_id}] Formato detectado: {audio_format}")
        
        # Crear archivo temporal con extensi√≥n correcta
        with tempfile.NamedTemporaryFile(suffix=audio_format, delete=False) as tmp:
            tmp.write(audio_bytes)
            temp_path = tmp.name
        
        # Validar tama√±o de archivo
        file_size_mb = len(audio_bytes) / (1024 * 1024)
        logger.info(f"üìÅ [PROCESS {process_id}] Archivo: {file_size_mb:.1f}MB, Formato: {audio_format}")
        
        if len(audio_bytes) < 100:  # Menos de 100 bytes es definitivamente inv√°lido
            raise ValueError(f"Archivo de audio demasiado peque√±o: {len(audio_bytes)} bytes")
        
        # Obtener modelo y transcribir
        whisper_model = get_whisper_model()
        
        transcription_start = time.time()
        logger.info(f"üîÑ [PROCESS {process_id}] TRANSCRIBIENDO...")
        
        try:
            segments, info = whisper_model.transcribe(
                temp_path, 
                beam_size=5, 
                language="es"
            )
        except Exception as transcription_error:
            # Error espec√≠fico de transcripci√≥n
            if "Invalid data found" in str(transcription_error):
                raise ValueError(f"Archivo de audio corrupto o formato no v√°lido: {transcription_error}")
            else:
                raise  # Re-lanzar otros errores
        
        segment_texts = [segment.text for segment in segments]
        transcription = "".join(segment_texts).strip()
        
        transcription_time = time.time() - transcription_start
        total_time = time.time() - start_time
        
        if not transcription:
            raise ValueError("Transcripci√≥n vac√≠a")
        
        logger.info(f"‚úÖ [PROCESS {process_id}] COMPLETADO - JobID: {actual_job_id}")
        logger.info(f"   üìù Texto: {transcription[:50]}...")
        logger.info(f"   ‚è±Ô∏è  Transcripci√≥n: {transcription_time:.2f}s")
        logger.info(f"   ‚è±Ô∏è  Total: {total_time:.2f}s")
        
        # üè¢ ENTERPRISE CALLBACK: Simple, sin sleep
        if fixed_callback_url:
            callback_start = time.time()
            send_enterprise_callback(fixed_callback_url, actual_job_id, "completed", 
                                   transcription, None, callback_token, process_id)
            callback_time = time.time() - callback_start
            logger.info(f"üìû [PROCESS {process_id}] Callback enviado en {callback_time:.2f}s")
        
        return transcription
        
    except Exception as e:
        error_msg = f"{type(e).__name__}: {str(e)}"
        total_time = time.time() - start_time
        
        logger.error(f"‚ùå [PROCESS {process_id}] ERROR - JobID: {actual_job_id}")
        logger.error(f"   üêõ Error: {error_msg}")
        logger.error(f"   ‚è±Ô∏è  Tiempo: {total_time:.2f}s")
        
        # Callback de error
        if fixed_callback_url:
            send_enterprise_callback(fixed_callback_url, actual_job_id, "failed", 
                                   None, error_msg, callback_token, process_id)
        
        raise
        
    finally:
        if temp_path and os.path.exists(temp_path):
            try:
                os.unlink(temp_path)
                logger.debug(f"üóëÔ∏è [PROCESS {process_id}] Archivo temporal eliminado")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [PROCESS {process_id}] No se pudo eliminar {temp_path}: {e}")

def send_enterprise_callback(callback_url: str, job_id: str, status: str, 
                           transcription: str = None, error: str = None, 
                           callback_token: str = None, process_id: int = None):
    """
    üè¢ ENTERPRISE CALLBACK: Simple, directo, sin sleep
    
    Spring Boot ya tiene la referencia cuando llega este callback.
    No necesitamos esperas ni reintentos complejos.
    """
    if process_id is None:
        process_id = os.getpid()
    
    max_retries = 2  # Solo 2 intentos
    timeout = 10
    
    for attempt in range(1, max_retries + 1):
        try:
            payload = {
                "jobId": job_id,
                "status": status
            }
            
            if status == "completed" and transcription:
                payload["transcription"] = transcription
            elif status == "failed" and error:
                payload["error"] = error
            
            headers = {"Content-Type": "application/json"}
            if callback_token:
                headers["Authorization"] = f"Bearer {callback_token}"
            
            logger.info(f"üìû [PROCESS {process_id}] Callback enterprise (intento {attempt}/{max_retries}) - JobID: {job_id}")
            
            response = requests.post(
                callback_url,
                json=payload,
                timeout=timeout,
                headers=headers
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ [PROCESS {process_id}] Callback enterprise exitoso - JobID: {job_id}")
                return
            else:
                logger.warning(f"‚ö†Ô∏è [PROCESS {process_id}] Callback fall√≥: HTTP {response.status_code}")
                logger.debug(f"Response: {response.text}")
                
        except Exception as e:
            logger.error(f"‚ùå [PROCESS {process_id}] Error callback (intento {attempt}): {e}")
        
        # Solo 1 reintento con pausa m√≠nima
        if attempt < max_retries:
            logger.info(f"‚è≥ [PROCESS {process_id}] Reintentando en 2s...")
            time.sleep(2)
    
    # Si falla, log pero no crash
    logger.error(f"üí• [PROCESS {process_id}] Callback enterprise fall√≥ definitivamente - JobID: {job_id}")
    logger.error(f"üí° [PROCESS {process_id}] Spring Boot deber√≠a tener la referencia. Revisar logs del backend.")
